// This is an autogenerated file from Firebase Studio.

'use server';
/**
 * @fileOverview Predicts the verdict of a movie based on provided movie data.
 *
 * - predictVerdict - A function that handles the movie verdict prediction process.
 * - PredictVerdictInput - The input type for the predictVerdict function.
 * - PredictVerdictOutput - The return type for the predictVerdict function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const PredictVerdictInputSchema = z.object({
  title: z.string().describe('The title of the movie.'),
  cast: z.array(z.string()).describe('The list of cast members in the movie'),
  releaseDate: z.string().describe('The release date of the movie.'),
  genre: z.string().describe('The genre of the movie.'),
  director: z.string().describe('The director of the movie.'),
  synopsis: z.string().describe('The synopsis of the movie.'),
});
export type PredictVerdictInput = z.infer<typeof PredictVerdictInputSchema>;

const PredictVerdictOutputSchema = z.object({
  verdict: z.string().describe('The predicted verdict of the movie (hit, flop, average).'),
  justification: z.string().describe('The justification for the predicted verdict.'),
});
export type PredictVerdictOutput = z.infer<typeof PredictVerdictOutputSchema>;

export async function predictVerdict(input: PredictVerdictInput): Promise<PredictVerdictOutput> {
  return predictVerdictFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictVerdictPrompt',
  input: {
    schema: z.object({
      title: z.string().describe('The title of the movie.'),
      cast: z.array(z.string()).describe('The list of cast members in the movie'),
      releaseDate: z.string().describe('The release date of the movie.'),
      genre: z.string().describe('The genre of the movie.'),
      director: z.string().describe('The director of the movie.'),
      synopsis: z.string().describe('The synopsis of the movie.'),
    }),
  },
  output: {
    schema: z.object({
      verdict: z.string().describe('The predicted verdict of the movie (hit, flop, average).'),
      justification: z.string().describe('The justification for the predicted verdict.'),
    }),
  },
  prompt: `Given the following movie data, predict the verdict (hit, flop, or average) and provide a justification.

Title: {{{title}}}
Cast: {{#each cast}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Release Date: {{{releaseDate}}}
Genre: {{{genre}}}
Director: {{{director}}}
Synopsis: {{{synopsis}}}

Verdict:`,
});

const predictVerdictFlow = ai.defineFlow<
  typeof PredictVerdictInputSchema,
  typeof PredictVerdictOutputSchema
>({
  name: 'predictVerdictFlow',
  inputSchema: PredictVerdictInputSchema,
  outputSchema: PredictVerdictOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
